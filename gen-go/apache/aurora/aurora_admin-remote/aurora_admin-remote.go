// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"apache/aurora"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  Response setQuota(string ownerRole, ResourceAggregate quota)")
	fmt.Fprintln(os.Stderr, "  Response forceTaskState(string taskId, ScheduleStatus status)")
	fmt.Fprintln(os.Stderr, "  Response performBackup()")
	fmt.Fprintln(os.Stderr, "  Response listBackups()")
	fmt.Fprintln(os.Stderr, "  Response stageRecovery(string backupId)")
	fmt.Fprintln(os.Stderr, "  Response queryRecovery(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response deleteRecoveryTasks(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response commitRecovery()")
	fmt.Fprintln(os.Stderr, "  Response unloadRecovery()")
	fmt.Fprintln(os.Stderr, "  Response startMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response drainHosts(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response maintenanceStatus(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response endMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response snapshot()")
	fmt.Fprintln(os.Stderr, "  Response rewriteConfigs(RewriteConfigsRequest request)")
	fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds)")
	fmt.Fprintln(os.Stderr, "  Response killTasks(JobKey job,  instances)")
	fmt.Fprintln(os.Stderr, "  Response addInstances(InstanceKey key, i32 count)")
	fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config)")
	fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
	fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response rollbackJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
	fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
	fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
	fmt.Fprintln(os.Stderr, "  Response getTierConfigs()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := aurora.NewAuroraAdminClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "setQuota":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetQuota requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg345 := flag.Arg(2)
		mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
		defer mbTrans346.Close()
		_, err347 := mbTrans346.WriteString(arg345)
		if err347 != nil {
			Usage()
			return
		}
		factory348 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt349 := factory348.GetProtocol(mbTrans346)
		argvalue1 := aurora.NewResourceAggregate()
		err350 := argvalue1.Read(jsProt349)
		if err350 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetQuota(value0, value1))
		fmt.Print("\n")
		break
	case "forceTaskState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ForceTaskState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := aurora.ScheduleStatus(tmp1)
		value1 := argvalue1
		fmt.Print(client.ForceTaskState(value0, value1))
		fmt.Print("\n")
		break
	case "performBackup":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "PerformBackup requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.PerformBackup())
		fmt.Print("\n")
		break
	case "listBackups":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListBackups requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListBackups())
		fmt.Print("\n")
		break
	case "stageRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StageRecovery requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.StageRecovery(value0))
		fmt.Print("\n")
		break
	case "queryRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryRecovery requires 1 args")
			flag.Usage()
		}
		arg353 := flag.Arg(1)
		mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
		defer mbTrans354.Close()
		_, err355 := mbTrans354.WriteString(arg353)
		if err355 != nil {
			Usage()
			return
		}
		factory356 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt357 := factory356.GetProtocol(mbTrans354)
		argvalue0 := aurora.NewTaskQuery()
		err358 := argvalue0.Read(jsProt357)
		if err358 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryRecovery(value0))
		fmt.Print("\n")
		break
	case "deleteRecoveryTasks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteRecoveryTasks requires 1 args")
			flag.Usage()
		}
		arg359 := flag.Arg(1)
		mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
		defer mbTrans360.Close()
		_, err361 := mbTrans360.WriteString(arg359)
		if err361 != nil {
			Usage()
			return
		}
		factory362 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt363 := factory362.GetProtocol(mbTrans360)
		argvalue0 := aurora.NewTaskQuery()
		err364 := argvalue0.Read(jsProt363)
		if err364 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteRecoveryTasks(value0))
		fmt.Print("\n")
		break
	case "commitRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "CommitRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.CommitRecovery())
		fmt.Print("\n")
		break
	case "unloadRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "UnloadRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.UnloadRecovery())
		fmt.Print("\n")
		break
	case "startMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartMaintenance requires 1 args")
			flag.Usage()
		}
		arg365 := flag.Arg(1)
		mbTrans366 := thrift.NewTMemoryBufferLen(len(arg365))
		defer mbTrans366.Close()
		_, err367 := mbTrans366.WriteString(arg365)
		if err367 != nil {
			Usage()
			return
		}
		factory368 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt369 := factory368.GetProtocol(mbTrans366)
		argvalue0 := aurora.NewHosts()
		err370 := argvalue0.Read(jsProt369)
		if err370 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartMaintenance(value0))
		fmt.Print("\n")
		break
	case "drainHosts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DrainHosts requires 1 args")
			flag.Usage()
		}
		arg371 := flag.Arg(1)
		mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
		defer mbTrans372.Close()
		_, err373 := mbTrans372.WriteString(arg371)
		if err373 != nil {
			Usage()
			return
		}
		factory374 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt375 := factory374.GetProtocol(mbTrans372)
		argvalue0 := aurora.NewHosts()
		err376 := argvalue0.Read(jsProt375)
		if err376 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DrainHosts(value0))
		fmt.Print("\n")
		break
	case "maintenanceStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MaintenanceStatus requires 1 args")
			flag.Usage()
		}
		arg377 := flag.Arg(1)
		mbTrans378 := thrift.NewTMemoryBufferLen(len(arg377))
		defer mbTrans378.Close()
		_, err379 := mbTrans378.WriteString(arg377)
		if err379 != nil {
			Usage()
			return
		}
		factory380 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt381 := factory380.GetProtocol(mbTrans378)
		argvalue0 := aurora.NewHosts()
		err382 := argvalue0.Read(jsProt381)
		if err382 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MaintenanceStatus(value0))
		fmt.Print("\n")
		break
	case "endMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EndMaintenance requires 1 args")
			flag.Usage()
		}
		arg383 := flag.Arg(1)
		mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
		defer mbTrans384.Close()
		_, err385 := mbTrans384.WriteString(arg383)
		if err385 != nil {
			Usage()
			return
		}
		factory386 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt387 := factory386.GetProtocol(mbTrans384)
		argvalue0 := aurora.NewHosts()
		err388 := argvalue0.Read(jsProt387)
		if err388 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.EndMaintenance(value0))
		fmt.Print("\n")
		break
	case "snapshot":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Snapshot requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Snapshot())
		fmt.Print("\n")
		break
	case "rewriteConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RewriteConfigs requires 1 args")
			flag.Usage()
		}
		arg389 := flag.Arg(1)
		mbTrans390 := thrift.NewTMemoryBufferLen(len(arg389))
		defer mbTrans390.Close()
		_, err391 := mbTrans390.WriteString(arg389)
		if err391 != nil {
			Usage()
			return
		}
		factory392 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt393 := factory392.GetProtocol(mbTrans390)
		argvalue0 := aurora.NewRewriteConfigsRequest()
		err394 := argvalue0.Read(jsProt393)
		if err394 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RewriteConfigs(value0))
		fmt.Print("\n")
		break
	case "createJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateJob requires 1 args")
			flag.Usage()
		}
		arg395 := flag.Arg(1)
		mbTrans396 := thrift.NewTMemoryBufferLen(len(arg395))
		defer mbTrans396.Close()
		_, err397 := mbTrans396.WriteString(arg395)
		if err397 != nil {
			Usage()
			return
		}
		factory398 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt399 := factory398.GetProtocol(mbTrans396)
		argvalue0 := aurora.NewJobConfiguration()
		err400 := argvalue0.Read(jsProt399)
		if err400 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateJob(value0))
		fmt.Print("\n")
		break
	case "scheduleCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 1 args")
			flag.Usage()
		}
		arg401 := flag.Arg(1)
		mbTrans402 := thrift.NewTMemoryBufferLen(len(arg401))
		defer mbTrans402.Close()
		_, err403 := mbTrans402.WriteString(arg401)
		if err403 != nil {
			Usage()
			return
		}
		factory404 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt405 := factory404.GetProtocol(mbTrans402)
		argvalue0 := aurora.NewJobConfiguration()
		err406 := argvalue0.Read(jsProt405)
		if err406 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ScheduleCronJob(value0))
		fmt.Print("\n")
		break
	case "descheduleCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 1 args")
			flag.Usage()
		}
		arg407 := flag.Arg(1)
		mbTrans408 := thrift.NewTMemoryBufferLen(len(arg407))
		defer mbTrans408.Close()
		_, err409 := mbTrans408.WriteString(arg407)
		if err409 != nil {
			Usage()
			return
		}
		factory410 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt411 := factory410.GetProtocol(mbTrans408)
		argvalue0 := aurora.NewJobKey()
		err412 := argvalue0.Read(jsProt411)
		if err412 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescheduleCronJob(value0))
		fmt.Print("\n")
		break
	case "startCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
			flag.Usage()
		}
		arg413 := flag.Arg(1)
		mbTrans414 := thrift.NewTMemoryBufferLen(len(arg413))
		defer mbTrans414.Close()
		_, err415 := mbTrans414.WriteString(arg413)
		if err415 != nil {
			Usage()
			return
		}
		factory416 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt417 := factory416.GetProtocol(mbTrans414)
		argvalue0 := aurora.NewJobKey()
		err418 := argvalue0.Read(jsProt417)
		if err418 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartCronJob(value0))
		fmt.Print("\n")
		break
	case "restartShards":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RestartShards requires 2 args")
			flag.Usage()
		}
		arg419 := flag.Arg(1)
		mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
		defer mbTrans420.Close()
		_, err421 := mbTrans420.WriteString(arg419)
		if err421 != nil {
			Usage()
			return
		}
		factory422 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt423 := factory422.GetProtocol(mbTrans420)
		argvalue0 := aurora.NewJobKey()
		err424 := argvalue0.Read(jsProt423)
		if err424 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg425 := flag.Arg(2)
		mbTrans426 := thrift.NewTMemoryBufferLen(len(arg425))
		defer mbTrans426.Close()
		_, err427 := mbTrans426.WriteString(arg425)
		if err427 != nil {
			Usage()
			return
		}
		factory428 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt429 := factory428.GetProtocol(mbTrans426)
		containerStruct1 := aurora.NewAuroraAdminRestartShardsArgs()
		err430 := containerStruct1.ReadField2(jsProt429)
		if err430 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ShardIds
		value1 := argvalue1
		fmt.Print(client.RestartShards(value0, value1))
		fmt.Print("\n")
		break
	case "killTasks":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "KillTasks requires 2 args")
			flag.Usage()
		}
		arg431 := flag.Arg(1)
		mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
		defer mbTrans432.Close()
		_, err433 := mbTrans432.WriteString(arg431)
		if err433 != nil {
			Usage()
			return
		}
		factory434 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt435 := factory434.GetProtocol(mbTrans432)
		argvalue0 := aurora.NewJobKey()
		err436 := argvalue0.Read(jsProt435)
		if err436 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg437 := flag.Arg(2)
		mbTrans438 := thrift.NewTMemoryBufferLen(len(arg437))
		defer mbTrans438.Close()
		_, err439 := mbTrans438.WriteString(arg437)
		if err439 != nil {
			Usage()
			return
		}
		factory440 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt441 := factory440.GetProtocol(mbTrans438)
		containerStruct1 := aurora.NewAuroraAdminKillTasksArgs()
		err442 := containerStruct1.ReadField2(jsProt441)
		if err442 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Instances
		value1 := argvalue1
		fmt.Print(client.KillTasks(value0, value1))
		fmt.Print("\n")
		break
	case "addInstances":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddInstances requires 2 args")
			flag.Usage()
		}
		arg443 := flag.Arg(1)
		mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
		defer mbTrans444.Close()
		_, err445 := mbTrans444.WriteString(arg443)
		if err445 != nil {
			Usage()
			return
		}
		factory446 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt447 := factory446.GetProtocol(mbTrans444)
		argvalue0 := aurora.NewInstanceKey()
		err448 := argvalue0.Read(jsProt447)
		if err448 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err449 := (strconv.Atoi(flag.Arg(2)))
		if err449 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.AddInstances(value0, value1))
		fmt.Print("\n")
		break
	case "replaceCronTemplate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 1 args")
			flag.Usage()
		}
		arg450 := flag.Arg(1)
		mbTrans451 := thrift.NewTMemoryBufferLen(len(arg450))
		defer mbTrans451.Close()
		_, err452 := mbTrans451.WriteString(arg450)
		if err452 != nil {
			Usage()
			return
		}
		factory453 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt454 := factory453.GetProtocol(mbTrans451)
		argvalue0 := aurora.NewJobConfiguration()
		err455 := argvalue0.Read(jsProt454)
		if err455 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReplaceCronTemplate(value0))
		fmt.Print("\n")
		break
	case "startJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
			flag.Usage()
		}
		arg456 := flag.Arg(1)
		mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
		defer mbTrans457.Close()
		_, err458 := mbTrans457.WriteString(arg456)
		if err458 != nil {
			Usage()
			return
		}
		factory459 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt460 := factory459.GetProtocol(mbTrans457)
		argvalue0 := aurora.NewJobUpdateRequest()
		err461 := argvalue0.Read(jsProt460)
		if err461 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.StartJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pauseJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
			flag.Usage()
		}
		arg463 := flag.Arg(1)
		mbTrans464 := thrift.NewTMemoryBufferLen(len(arg463))
		defer mbTrans464.Close()
		_, err465 := mbTrans464.WriteString(arg463)
		if err465 != nil {
			Usage()
			return
		}
		factory466 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt467 := factory466.GetProtocol(mbTrans464)
		argvalue0 := aurora.NewJobUpdateKey()
		err468 := argvalue0.Read(jsProt467)
		if err468 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.PauseJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "resumeJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
			flag.Usage()
		}
		arg470 := flag.Arg(1)
		mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
		defer mbTrans471.Close()
		_, err472 := mbTrans471.WriteString(arg470)
		if err472 != nil {
			Usage()
			return
		}
		factory473 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt474 := factory473.GetProtocol(mbTrans471)
		argvalue0 := aurora.NewJobUpdateKey()
		err475 := argvalue0.Read(jsProt474)
		if err475 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ResumeJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "abortJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
			flag.Usage()
		}
		arg477 := flag.Arg(1)
		mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
		defer mbTrans478.Close()
		_, err479 := mbTrans478.WriteString(arg477)
		if err479 != nil {
			Usage()
			return
		}
		factory480 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt481 := factory480.GetProtocol(mbTrans478)
		argvalue0 := aurora.NewJobUpdateKey()
		err482 := argvalue0.Read(jsProt481)
		if err482 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AbortJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "rollbackJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RollbackJobUpdate requires 2 args")
			flag.Usage()
		}
		arg484 := flag.Arg(1)
		mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
		defer mbTrans485.Close()
		_, err486 := mbTrans485.WriteString(arg484)
		if err486 != nil {
			Usage()
			return
		}
		factory487 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt488 := factory487.GetProtocol(mbTrans485)
		argvalue0 := aurora.NewJobUpdateKey()
		err489 := argvalue0.Read(jsProt488)
		if err489 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RollbackJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pulseJobUpdate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
			flag.Usage()
		}
		arg491 := flag.Arg(1)
		mbTrans492 := thrift.NewTMemoryBufferLen(len(arg491))
		defer mbTrans492.Close()
		_, err493 := mbTrans492.WriteString(arg491)
		if err493 != nil {
			Usage()
			return
		}
		factory494 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt495 := factory494.GetProtocol(mbTrans492)
		argvalue0 := aurora.NewJobUpdateKey()
		err496 := argvalue0.Read(jsProt495)
		if err496 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PulseJobUpdate(value0))
		fmt.Print("\n")
		break
	case "getRoleSummary":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleSummary())
		fmt.Print("\n")
		break
	case "getJobSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobSummary(value0))
		fmt.Print("\n")
		break
	case "getTasksStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
			flag.Usage()
		}
		arg498 := flag.Arg(1)
		mbTrans499 := thrift.NewTMemoryBufferLen(len(arg498))
		defer mbTrans499.Close()
		_, err500 := mbTrans499.WriteString(arg498)
		if err500 != nil {
			Usage()
			return
		}
		factory501 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt502 := factory501.GetProtocol(mbTrans499)
		argvalue0 := aurora.NewTaskQuery()
		err503 := argvalue0.Read(jsProt502)
		if err503 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksStatus(value0))
		fmt.Print("\n")
		break
	case "getTasksWithoutConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
			flag.Usage()
		}
		arg504 := flag.Arg(1)
		mbTrans505 := thrift.NewTMemoryBufferLen(len(arg504))
		defer mbTrans505.Close()
		_, err506 := mbTrans505.WriteString(arg504)
		if err506 != nil {
			Usage()
			return
		}
		factory507 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt508 := factory507.GetProtocol(mbTrans505)
		argvalue0 := aurora.NewTaskQuery()
		err509 := argvalue0.Read(jsProt508)
		if err509 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksWithoutConfigs(value0))
		fmt.Print("\n")
		break
	case "getPendingReason":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
			flag.Usage()
		}
		arg510 := flag.Arg(1)
		mbTrans511 := thrift.NewTMemoryBufferLen(len(arg510))
		defer mbTrans511.Close()
		_, err512 := mbTrans511.WriteString(arg510)
		if err512 != nil {
			Usage()
			return
		}
		factory513 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt514 := factory513.GetProtocol(mbTrans511)
		argvalue0 := aurora.NewTaskQuery()
		err515 := argvalue0.Read(jsProt514)
		if err515 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPendingReason(value0))
		fmt.Print("\n")
		break
	case "getConfigSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
			flag.Usage()
		}
		arg516 := flag.Arg(1)
		mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
		defer mbTrans517.Close()
		_, err518 := mbTrans517.WriteString(arg516)
		if err518 != nil {
			Usage()
			return
		}
		factory519 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt520 := factory519.GetProtocol(mbTrans517)
		argvalue0 := aurora.NewJobKey()
		err521 := argvalue0.Read(jsProt520)
		if err521 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetConfigSummary(value0))
		fmt.Print("\n")
		break
	case "getJobs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobs(value0))
		fmt.Print("\n")
		break
	case "getQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetQuota(value0))
		fmt.Print("\n")
		break
	case "populateJobConfig":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
			flag.Usage()
		}
		arg524 := flag.Arg(1)
		mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
		defer mbTrans525.Close()
		_, err526 := mbTrans525.WriteString(arg524)
		if err526 != nil {
			Usage()
			return
		}
		factory527 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt528 := factory527.GetProtocol(mbTrans525)
		argvalue0 := aurora.NewJobConfiguration()
		err529 := argvalue0.Read(jsProt528)
		if err529 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PopulateJobConfig(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateSummaries":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
			flag.Usage()
		}
		arg530 := flag.Arg(1)
		mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
		defer mbTrans531.Close()
		_, err532 := mbTrans531.WriteString(arg530)
		if err532 != nil {
			Usage()
			return
		}
		factory533 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt534 := factory533.GetProtocol(mbTrans531)
		argvalue0 := aurora.NewJobUpdateQuery()
		err535 := argvalue0.Read(jsProt534)
		if err535 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateSummaries(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDetails":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 1 args")
			flag.Usage()
		}
		arg536 := flag.Arg(1)
		mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
		defer mbTrans537.Close()
		_, err538 := mbTrans537.WriteString(arg536)
		if err538 != nil {
			Usage()
			return
		}
		factory539 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt540 := factory539.GetProtocol(mbTrans537)
		argvalue0 := aurora.NewJobUpdateKey()
		err541 := argvalue0.Read(jsProt540)
		if err541 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDetails(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDiff":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
			flag.Usage()
		}
		arg542 := flag.Arg(1)
		mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
		defer mbTrans543.Close()
		_, err544 := mbTrans543.WriteString(arg542)
		if err544 != nil {
			Usage()
			return
		}
		factory545 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt546 := factory545.GetProtocol(mbTrans543)
		argvalue0 := aurora.NewJobUpdateRequest()
		err547 := argvalue0.Read(jsProt546)
		if err547 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDiff(value0))
		fmt.Print("\n")
		break
	case "getTierConfigs":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetTierConfigs requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetTierConfigs())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
